name: Execute Admin API Calls

on:
  pull_request:
    types: [closed]

jobs:
  execute-api:
    # Only run when PR is merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/master' && 'production' || 'staging' }}
    steps:
      - name: Extract API info
        id: api-info
        uses: ./.github/actions/extract-api-info
        with:
          pr-description: ${{ github.event.pull_request.body }}
      
      # Skip the rest of the workflow if no API info was found
      - name: Skip if no API info
        if: steps.api-info.outputs.has-api-info != 'true'
        run: echo "No API information found in PR description. Skipping API call."
      
      - name: Execute API call
        if: steps.api-info.outputs.has-api-info == 'true'
        uses: actions/github-script@v7
        env:
          COFACTS_ADMIN_API_URL: ${{ vars.COFACTS_ADMIN_API_URL }}
          COFACTS_ADMIN_CLIENT_ID: ${{ vars.COFACTS_ADMIN_CLIENT_ID }}
          COFACTS_ADMIN_CLIENT_SECRET: ${{ secrets.COFACTS_ADMIN_CLIENT_SECRET }}
          API_ENDPOINT: ${{ steps.api-info.outputs.api-endpoint }}
          API_BODY: ${{ steps.api-info.outputs.api-body }}
        with:
          script: |
            const apiEndpoint = process.env.API_ENDPOINT;
            const apiBody = process.env.API_BODY;
            
            // Construct full URL
            const apiUrl = `${process.env.COFACTS_ADMIN_API_URL}${apiEndpoint}`;
            console.log(`Executing API call to: ${apiUrl}`);
            console.log(`With request body: ${apiBody}`);
            
            try {
              // Make API call
              const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'CF-Access-Client-Id': process.env.COFACTS_ADMIN_CLIENT_ID,
                  'CF-Access-Client-Secret': process.env.COFACTS_ADMIN_CLIENT_SECRET
                },
                body: apiBody
              });

              const responseData = await response.json();

              // Check if response is successful
              if (!response.ok) {
                throw new Error(`API call failed with status ${response.status}: ${JSON.stringify(responseData)}`);
              }

              // Comment on PR with API response
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `✅ API call executed successfully!\n\n**Response:**\n\`\`\`json\n${JSON.stringify(responseData, null, 2)}\n\`\`\``
              });

              console.log('API call successful and PR comment added');
            } catch (error) {
              console.error('Error executing API call:', error);

              // Comment on PR with error
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `❌ API call failed!\n\n**Error:**\n\`\`\`\n${error.message}\n\`\`\``
              });
            }
